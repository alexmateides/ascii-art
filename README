This is my semestral project, that I did for my Programming and Algorithmics 2 (PA2) course at FIT CTU.

The objective was to develop an application that converts images into ASCII-art form. The application also had to support some basic functions like switching images, presentation mode and most importantly image filters.

The app was developed with the help of SDL2 for graphics and Nlohmann's JSON library for config parsing.



Current user documentation is in Czech (will probably translate to English in future):

===========================================================================================================

Stručný návod k ovládání aplikace:

===========================================================================================================
CONFIG
======
config.json musí mít specifický formát, který lze vidět v testovacích datech (config1.json) nebo v adresáři (config.json)

alphabet: 	množina ASCII znaků pro vykreslení
img_folder:	path do složky s obrázky
img_paths:	názvy obrázků uvnitř složky
equation:	rovnice pro poměr RGB
output_path:	path do výstupového souboru
defaultFilters:	výchozí filtry ovládané z GUI
	{
	brightness: 	[A/R, num]
	rotation:	num (degrees)
	resize:		num (0+)
	blur:		num (0+)
	}
filters:	filtry aplikované v preproccessingu
	{
	all: 		[dílčí filtry]	- aplikované pro všechny obrázky
	filename:	[dílčí filtry]	- aplikované pro daný obrázek
	}

dílčí filtry:
	{
	filterName: jméno filtru
	(případné argumenty)
	}

	filter:			jméno, 			argumenty
	resize:			resize,			factor
	blur:			blur,			strength
	rotation:		rotation,		angle
	reflectionVertical:	reflectionVertical,	(NONE)
	reflectionHorizontal:	reflectionHorizontal,	(NONE)
	negative:		negative		(NONE)
	brigthness:		brightness		type (A/R), value (int/float)

POZOR! 	
při nedodržení formátu configu je zaručeno pouze to, že nedojde k nekontrolovanému pádu programu
může dojít k nečekanému chování při aplikaci filtrů	

OVLÁDÁNÍ
========
GUI:
[LEFT]/[RIGHT]	- přepínání obrázku
[SPACE]		- spuštění/zastavení prezentace
[K]		- výpis aktuálního obrázku do konzole
[L]		- výpis všech obrázků do konzole
[O]		- výpis aktuálního obrázku do souboru
[P]		- výpis všech obrázků do souboru

FILTRY:
[UP]/[DOWN]	- změna jasu
[N]		- negativ
[R]		- překlopení okolo osy Y
[T]		- překlopení okolo osy X
[D]/[F]		- změna velikosti (škálování)
[G]/[H]		- otočení
[C]		- rozmazání

===========================================================================================================
  
Zde je seznam již implementovaných funkcionalit, které aplikace podporuje (a nepodporuje)

===========================================================================================================
[X] - podporuje	
[_] - (ještě) nepodporuje
=======================================================================

Loading:
[X] - obrázků
[X] - rovnice (RGB -> grayscale poměr)
[X] - "abecedy" - množiny ACII znaků
[X] - file path
[X] - output file
[X] - předem aplikovaných filtrů
	[X] - jednotlivé obrázky
	[X] - všechny obrázky

Filtry:
[X] - změna jasu
[X] - vertikální a horizontální reflexe (zrcadlení)
[X] - negativ
[X] - rotace
[X] - změna velikosti
[X] - rozmazání
[-] - konvoluce (fungují, ale musí být hardcoded)

Zobrazení:
[X] - GUI
[X] - konzole
[X] - soubor

Aplikace:
[X] - přepínání obrázků
[X] - aplikace filtrů
[X] - spuštění/zastavení prezentace

===========================================================================================================

Třídy:

===========================================================================================================

CLoader:
  -tato třída slouží k načítání a zpracování dat z konfiguračního souboru, stará se zejména
   o syntaktickou kontrolu konfiguračního souboru a konfiguračních dat

CData:
  -ukládá data (zejména obrázky) a předzpracuje je ještě před zobrazením v GUI -> změna do
   grayscale formátu, aplikace filtrů zadaných v konfiguračním souboru

CAtlas:
  -atlas glyphů (předrenderovaných ASCII znaků), který umožňuje znatelně rychlejší vykreslení
   obrázků v GUI a tím pádem pohodlnou a živou aplikaci filtrů manuálně uživatelem

CFilter:
  -abstraktní třída, která se stará o filtrování obrázků
  -filter()		-virtuální metoda, kterou každá poddtřída aplikuje svůj vlastní filtr.
			 dále má každá instance ukazatel na další filtr v řetězci, tedy pokud
			 se _nextFilter != nullptr, tak se pokračuje v řetězci filtrů dál
  -copy()		-virtuální metoda, vrací hlubokou kopii instance jako shared_ptr<CFilter>,
		 	 toho se bude později hodit ve skládání filtrů
  -copyInverse()	-virtuální metoda, vrací shared_ptr<CFilter> na novou instanci, která je
		 	 inverzí starého filtru.
  -mergeFilters()	-virtuální metoda, na vstupu dostane std::vector<filtrů>, udělá jejich kopie
			 a tyto nové instance zřetězí pomocí členské proměnné _nextFilter a vrátí
			 shared_ptr<CFilter> na první článek řetězu. Zavolá-li se tedy metoda filter()
			 na první článek řetězu, dojde k provedení všech filtrů podle pořadí na vstupu
  -addChain()		-tato metoda přidá filtr předaný na vstupu na konec řetězu filtrů
  
  -Polymorfismus této třídy bude využit hlavně při aplikaci filtrů předem zadaných v konfiguračním souboru,
   dále také výrazně usnadní práci s filtry a zpřehlední kód.
   

CApp:
  -stará se o běh aplikace a GUI, pracuje na základě knihovny SDL2. Umožní uživateli manuálně
   aplikovat dodatečné filtry a pozorovat změnu obrázku. Zároveň umožňuje uživateli vypsat obrázky
   v textové ASCII podobě do konzole, či souboru. Uživatel má také možnost spustit prezentaci obrázků,
   která bude v časovém intervalu cyklit skrz obrázky.

===========================================================================================================
