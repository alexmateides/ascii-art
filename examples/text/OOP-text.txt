Třídy:

CLoader:
  -tato třída slouží k načítání a zpracování dat z konfiguračního souboru, stará se zejména
   o syntaktickou kontrolu konfiguračního souboru a konfiguračních dat

CData:
  -ukládá data (zejména obrázky) a předzpracuje je ještě před zobrazením v GUI -> změna do
   grayscale formátu, aplikace filtrů zadaných v konfiguračním souboru

CAtlas:
  -atlas glyphů (předrenderovaných ASCII znaků), který umožňuje znatelně rychlejší vykreslení
   obrázků v GUI a tím pádem pohodlnou a živou aplikaci filtrů manuálně uživatelem

CFilter:
  -abstraktní třída, která se stará o filtrování obrázků
  -filter()		-virtuální metoda, kterou každá poddtřída aplikuje svůj vlastní filtr.
			 dále má každá instance ukazatel na další filtr v řetězci, tedy pokud
			 se _nextFilter != nullptr, tak se pokračuje v řetězci filtrů dál
  -copy()		-virtuální metoda, vrací hlubokou kopii instance jako shared_ptr<CFilter>,
		 	 toho se bude později hodit ve skládání filtrů
  -copyInverse()	-virtuální metoda, vrací shared_ptr<CFilter> na novou instanci, která je
		 	 inverzí starého filtru.
  -mergeFilters()	-virtuální metoda, na vstupu dostane std::vector<filtrů>, udělá jejich kopie
			 a tyto nové instance zřetězí pomocí členské proměnné _nextFilter a vrátí
			 shared_ptr<CFilter> na první článek řetězu. Zavolá-li se tedy metoda filter()
			 na první článek řetězu, dojde k provedení všech filtrů podle pořadí na vstupu
  -addChain()		-tato metoda přidá filtr předaný na vstupu na konec řetězu filtrů
  
  -Polymorfismus této třídy bude využit hlavně při aplikaci filtrů předem zadaných v konfiguračním souboru,
   dále také výrazně usnadní práci s filtry a zpřehlední kód.
   

CApp:
  -stará se o běh aplikace a GUI, pracuje na základě knihovny SDL2. Umožní uživateli manuálně
   aplikovat dodatečné filtry a pozorovat změnu obrázku. Zároveň umožňuje uživateli vypsat obrázky
   v textové ASCII podobě do konzole, či souboru. Uživatel má také možnost spustit prezentaci obrázků,
   která bude v časovém intervalu cyklit skrz obrázky.